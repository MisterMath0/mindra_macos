//
//  SettingsView.swift
//  MindraTimer
//
//  Created by Guy Mathieu Foko on 09.06.25.
//

import SwiftUI

struct SettingsView: View {
    @EnvironmentObject var themeManager: ThemeManager
    @EnvironmentObject var timerManager: TimerManager
    @EnvironmentObject var windowManager: WindowManager
    @EnvironmentObject var appModeManager: AppModeManager
    
    @Environment(\.dismiss) private var dismiss
    
    @State private var focusMinutes: Double = 25
    @State private var shortBreakMinutes: Double = 5
    @State private var longBreakMinutes: Double = 10
    
    var body: some View {
        NavigationView {
            Form {
                // App Mode Section
                Section("App Mode") {
                    Picker("Mode", selection: $appModeManager.currentMode) {
                        ForEach(AppMode.allCases, id: \.self) { mode in
                            Text(mode.displayName).tag(mode)
                        }
                    }
                    .pickerStyle(SegmentedPickerStyle())
                }
                
                // Timer Duration Section
                Section("Timer Durations") {
                    VStack(alignment: .leading, spacing: 12) {
                        // Focus duration
                        VStack(alignment: .leading, spacing: 4) {
                            HStack {
                                Text("Focus Time")
                                    .font(.system(size: 14, weight: .medium))
                                Spacer()
                                Text("\(Int(focusMinutes)) min")
                                    .font(.system(size: 14, weight: .regular))
                                    .foregroundColor(.secondary)
                            }
                            
                            Slider(value: $focusMinutes, in: 1...60, step: 1)
                                .onChange(of: focusMinutes) { _, newValue in
                                    timerManager.updateDuration(for: .focus, minutes: Int(newValue))
                                }
                        }
                        
                        // Short break duration
                        VStack(alignment: .leading, spacing: 4) {
                            HStack {
                                Text("Short Break")
                                    .font(.system(size: 14, weight: .medium))
                                Spacer()
                                Text("\(Int(shortBreakMinutes)) min")
                                    .font(.system(size: 14, weight: .regular))
                                    .foregroundColor(.secondary)
                            }
                            
                            Slider(value: $shortBreakMinutes, in: 1...30, step: 1)
                                .onChange(of: shortBreakMinutes) { _, newValue in
                                    timerManager.updateDuration(for: .shortBreak, minutes: Int(newValue))
                                }
                        }
                        
                        // Long break duration
                        VStack(alignment: .leading, spacing: 4) {
                            HStack {
                                Text("Long Break")
                                    .font(.system(size: 14, weight: .medium))
                                Spacer()
                                Text("\(Int(longBreakMinutes)) min")
                                    .font(.system(size: 14, weight: .regular))
                                    .foregroundColor(.secondary)
                            }
                            
                            Slider(value: $longBreakMinutes, in: 1...60, step: 1)
                                .onChange(of: longBreakMinutes) { _, newValue in
                                    timerManager.updateDuration(for: .longBreak, minutes: Int(newValue))
                                }
                        }
                    }
                }
                
                // Appearance Section
                Section("Appearance") {
                    HStack {
                        Text("Theme")
                            .font(.system(size: 14, weight: .medium))
                        Spacer()
                        Picker("Theme", selection: $themeManager.currentTheme) {
                            ForEach(AppTheme.allCases, id: \.self) { theme in
                                Text(theme.displayName).tag(theme)
                            }
                        }
                        .pickerStyle(MenuPickerStyle())
                        .frame(width: 100)
                    }
                }
                
                // Window Settings Section
                Section("Window Settings") {
                    Toggle("Always on Top", isOn: $windowManager.isAlwaysOnTop)
                        .font(.system(size: 14, weight: .medium))
                    
                    Toggle("Compact Mode", isOn: $windowManager.isCompact)
                        .font(.system(size: 14, weight: .medium))
                }
                
                // Statistics Section
                Section("Statistics") {
                    HStack {
                        Text("Sessions Completed")
                            .font(.system(size: 14, weight: .medium))
                        Spacer()
                        Text("\(timerManager.sessionsCompleted)")
                            .font(.system(size: 14, weight: .regular))
                            .foregroundColor(.secondary)
                    }
                    
                    Button("Reset Statistics") {
                        timerManager.sessionsCompleted = 0
                    }
                    .foregroundColor(.red)
                    .font(.system(size: 14, weight: .medium))
                }
                
                // About Section
                Section("About") {
                    HStack {
                        Text("Version")
                            .font(.system(size: 14, weight: .medium))
                        Spacer()
                        Text("1.0.0")
                            .font(.system(size: 14, weight: .regular))
                            .foregroundColor(.secondary)
                    }
                }
            }
            .formStyle(.grouped)
            .navigationTitle("Settings")
            .toolbar {
                ToolbarItem(placement: .primaryAction) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
        .frame(width: 500, height: 600)
        .onAppear {
            loadCurrentSettings()
        }
    }
    
    private func loadCurrentSettings() {
        focusMinutes = Double(timerManager.focusDuration / 60)
        shortBreakMinutes = Double(timerManager.shortBreakDuration / 60)
        longBreakMinutes = Double(timerManager.longBreakDuration / 60)
    }
}

#Preview {
    SettingsView()
        .environmentObject(ThemeManager())
        .environmentObject(TimerManager())
        .environmentObject(WindowManager())
        .environmentObject(AppModeManager())
}
